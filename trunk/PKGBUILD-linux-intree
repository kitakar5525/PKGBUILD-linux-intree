# Modified PKGBUILD for building linux kernel in-tree.
# Copy files into the root of kernel tree then run makepkg like the
# following:
#     PKGDEST=./ makepkg -sCp PKGBUILD-linux-intree
#
# Reference: https://bbs.archlinux.org/viewtopic.php?id=213287
#
# - Make sure to update the link to config_surface-fragment on a major
#   kernel version update since the config is released as
#   surface-x.yz.config.
# - You can add your kernel config in config_mychanges-fragment to
#   override Arch Linux's default config.

pkgbase=linux-surface-mainline
pkgver="$(make kernelversion | sed s/'-'/'.'/g)"
pkgrel=1
pkgdesc="Linux $(git rev-parse --abbrev-ref HEAD)@$(git rev-parse --short=12 HEAD)"
arch=(x86_64)
license=(GPL2)
makedepends=(
  bc kmod libelf pahole cpio perl tar xz
  xmlto python-sphinx python-sphinx_rtd_theme graphviz imagemagick
  git
)
options=('!strip')
_srcname="$PWD" # for bulding in-tree
source=(
  # Arch Linux config
  config_archlinux::"https://raw.githubusercontent.com/archlinux/svntogit-packages/packages/linux/trunk/config"

  # The following are configs from outside Arch Linux. You can remove
  # these if you don't need.
  config_surface-fragment::https://raw.githubusercontent.com/linux-surface/linux-surface/master/configs/surface-5.15.config
  config_ls_archlinux-fragment::https://raw.githubusercontent.com/linux-surface/linux-surface/master/pkg/arch/kernel/arch.config
)
md5sums=(
  'SKIP'

  'SKIP'
  'SKIP'
)

export KBUILD_BUILD_HOST=archlinux
export KBUILD_BUILD_USER=$pkgbase
export KBUILD_BUILD_TIMESTAMP="$(date -Ru${SOURCE_DATE_EPOCH:+d @$SOURCE_DATE_EPOCH})"

### settings ###
BUILD_HEADER_PACKAGE=true
BUILD_DOCS_PACKAGE=false
# Skips _set_config(), prepare() and build() if set to true.
PACKAGING_ONLY=false

# Edit here when you need to use older gcc. Reference: linux-lts44
# CFLAGS CXXFLAGS are not used at all.
# LDFLAGS only works on the make command line. It is not used from the environment.
_makeopts=(
  # CC='gcc-4.8' CXX='g++-4.8' HOSTCC='gcc-4.8' HOSTCXX='g++-4.8'
  # CC='gcc-5' CXX='g++-5' HOSTCC='gcc-5' HOSTCXX='g++-5' # LD='ld.gold'
  # CC='gcc-6' CXX='g++-6' HOSTCC='gcc-6' HOSTCXX='g++-6'
  # LDFLAGS='-z max-page-size=0x200000' # http://lists.gnu.org/archive/html/bug-binutils/2018-03/msg00193.html
)
# makedepends+=('gcc48')

#########################

_set_config() {
  if $PACKAGING_ONLY; then
    return
  fi

  ./scripts/kconfig/merge_config.sh -m \
                            ./config_archlinux \
                            ./config_surface-fragment \
                            ./config_ls_archlinux-fragment \
                            ./config_mychanges-fragment
  make "${_makeopts[@]}" olddefconfig
  make "${_makeopts[@]}" prepare

  # cleanup
  rm config_archlinux
  rm config_surface-fragment
  rm config_ls_archlinux-fragment
}

prepare() {
  if $PACKAGING_ONLY; then
    return
  fi

  cd $_srcname

  echo "Setting version..."
  echo "" > .scmversion
  echo "-$pkgrel" > localversion.10-pkgrel
  echo "${pkgbase#linux}" > localversion.20-pkgname

  echo "Setting config..."
  _set_config
  cp .config config_${pkgbase}
  diff -u ../config_archlinux .config || :

  make "${_makeopts[@]}" -s kernelrelease > version
  echo "Prepared $pkgbase version $(<version)"
}

build() {
  if $PACKAGING_ONLY; then
    return
  fi

  cd $_srcname
  make "${_makeopts[@]}" all
  if $BUILD_DOCS_PACKAGE; then
    make "${_makeopts[@]}" htmldocs
  fi
}

_package() {
  pkgdesc="The $pkgdesc kernel and modules"
  depends=(coreutils kmod initramfs)
  optdepends=('crda: to set the correct wireless channels of your country'
              'linux-firmware: firmware images needed for some devices')
  provides=(VIRTUALBOX-GUEST-MODULES WIREGUARD-MODULE)
  replaces=(virtualbox-guest-modules-arch wireguard-arch)

  cd $_srcname
  local kernver="$(<version)"
  local modulesdir="$pkgdir/usr/lib/modules/$kernver"

  echo "Installing boot image..."
  # systemd expects to find the kernel here to allow hibernation
  # https://github.com/systemd/systemd/commit/edda44605f06a41fb86b7ab8128dcf99161d2344
  install -Dm644 "$(make "${_makeopts[@]}" -s image_name)" "$modulesdir/vmlinuz"

  # Used by mkinitcpio to name the kernel
  echo "$pkgbase" | install -Dm644 /dev/stdin "$modulesdir/pkgbase"

  echo "Installing modules..."
  make "${_makeopts[@]}" INSTALL_MOD_PATH="$pkgdir/usr" INSTALL_MOD_STRIP=1 modules_install

  # remove build and source links
  rm "$modulesdir"/{source,build}
}

_package-headers() {
  pkgdesc="Headers and scripts for building modules for the $pkgdesc kernel"
  depends=(pahole)

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing build files..."
  install -Dt "$builddir" -m644 .config Makefile Module.symvers System.map \
    localversion.* version vmlinux
  install -Dt "$builddir/kernel" -m644 kernel/Makefile
  install -Dt "$builddir/arch/x86" -m644 arch/x86/Makefile
  cp -t "$builddir" -a scripts

  # required when STACK_VALIDATION is enabled
  install -Dt "$builddir/tools/objtool" tools/objtool/objtool

  # required when DEBUG_INFO_BTF_MODULES is enabled
  install -Dt "$builddir/tools/bpf/resolve_btfids" tools/bpf/resolve_btfids/resolve_btfids

  echo "Installing headers..."
  cp -t "$builddir" -a include
  cp -t "$builddir/arch/x86" -a arch/x86/include
  install -Dt "$builddir/arch/x86/kernel" -m644 arch/x86/kernel/asm-offsets.s

  install -Dt "$builddir/drivers/md" -m644 drivers/md/*.h
  install -Dt "$builddir/net/mac80211" -m644 net/mac80211/*.h

  # https://bugs.archlinux.org/task/13146
  install -Dt "$builddir/drivers/media/i2c" -m644 drivers/media/i2c/msp3400-driver.h

  # https://bugs.archlinux.org/task/20402
  install -Dt "$builddir/drivers/media/usb/dvb-usb" -m644 drivers/media/usb/dvb-usb/*.h
  install -Dt "$builddir/drivers/media/dvb-frontends" -m644 drivers/media/dvb-frontends/*.h
  install -Dt "$builddir/drivers/media/tuners" -m644 drivers/media/tuners/*.h

  # https://bugs.archlinux.org/task/71392
  install -Dt "$builddir/drivers/iio/common/hid-sensors" -m644 drivers/iio/common/hid-sensors/*.h

  echo "Installing KConfig files..."
  find . -name 'Kconfig*' -exec install -Dm644 {} "$builddir/{}" \;

  echo "Removing unneeded architectures..."
  local arch
  for arch in "$builddir"/arch/*/; do
    [[ $arch = */x86/ ]] && continue
    echo "Removing $(basename "$arch")"
    rm -r "$arch"
  done

  echo "Removing documentation..."
  rm -r "$builddir/Documentation"

  echo "Removing broken symlinks..."
  find -L "$builddir" -type l -printf 'Removing %P\n' -delete

  echo "Removing loose objects..."
  find "$builddir" -type f -name '*.o' -printf 'Removing %P\n' -delete

  echo "Stripping build tools..."
  local file
  while read -rd '' file; do
    case "$(file -bi "$file")" in
      application/x-sharedlib\;*)      # Libraries (.so)
        strip -v $STRIP_SHARED "$file" ;;
      application/x-archive\;*)        # Libraries (.a)
        strip -v $STRIP_STATIC "$file" ;;
      application/x-executable\;*)     # Binaries
        strip -v $STRIP_BINARIES "$file" ;;
      application/x-pie-executable\;*) # Relocatable binaries
        strip -v $STRIP_SHARED "$file" ;;
    esac
  done < <(find "$builddir" -type f -perm -u+x ! -name vmlinux -print0)

  echo "Stripping vmlinux..."
  strip -v $STRIP_STATIC "$builddir/vmlinux"

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/src"
  ln -sr "$builddir" "$pkgdir/usr/src/$pkgbase"
}

_package-docs() {
  pkgdesc="Documentation for the $pkgdesc kernel"

  cd $_srcname
  local builddir="$pkgdir/usr/lib/modules/$(<version)/build"

  echo "Installing documentation..."
  local src dst
  while read -rd '' src; do
    dst="${src#Documentation/}"
    dst="$builddir/Documentation/${dst#output/}"
    install -Dm644 "$src" "$dst"
  done < <(find Documentation -name '.*' -prune -o ! -type d -print0)

  echo "Adding symlink..."
  mkdir -p "$pkgdir/usr/share/doc"
  ln -sr "$builddir/Documentation" "$pkgdir/usr/share/doc/$pkgbase"
}

pkgname=("$pkgbase")
if $BUILD_HEADER_PACKAGE; then pkgname+=("$pkgbase-headers"); fi
if $BUILD_DOCS_PACKAGE; then pkgname+=("$pkgbase-docs"); fi
for _p in "${pkgname[@]}"; do
  eval "package_$_p() {
    $(declare -f "_package${_p#$pkgbase}")
    _package${_p#$pkgbase}
  }"
done

# vim:set ts=8 sts=2 sw=2 et:
